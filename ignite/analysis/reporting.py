# from ignite.version import __version__
from datetime import datetime
from pathlib import Path
from typing import Any
import jinja2


def generate_markdown_report(
    config_path: str,
    summary_stats: dict[str, Any],
    output_dir: str = "output/reports",
    plots: dict[str, str] = None,
) -> str:
    """
    Generate a Markdown report for a FIRE simulation run using Jinja2 templating.

    Args:
        config_path (str): Path to the config file used.
        summary_stats (dict): Dictionary of summary statistics and key results.
        output_dir (str): Directory to save the report.
        plots (dict): Optional dict of plot names to file paths.

    Returns:
        str: Path to the generated markdown report.
    """
    if plots is None:
        plots = {}

    # Jinja2 template for the report
    template_str = """
# FIRE Simulation Report

**Config:** `{{ config_path }}`
**Run date:** {{ run_date }}
**Simulation count:** {{ summary_stats.simulation_count }}

## Key Parameters

| Parameter         | Value         |
|-------------------|--------------|
{% for k, v in summary_stats.parameters.items() %}
| {{ k }}           | {{ v }}      |
{% endfor %}

## Results

- **Success Rate:** {{ summary_stats.success_rate | round(3) }}
- **Median Final Wealth:** €{{ "{:,.0f}".format(summary_stats.median_final_wealth) }}
- **Worst Case Wealth:** €{{ "{:,.0f}".format(summary_stats.worst_final_wealth) }}
- **Best Case Wealth:** €{{ "{:,.0f}".format(summary_stats.best_final_wealth) }}

## Plots

{% for plot_name, plot_path in plots.items() %}
- [{{ plot_name }}]({{ plot_path }})
{% endfor %}

---


"""
    # *Generated by FIRE Simulator v{{ version }} on {{ run_date }}*

    # Prepare context for rendering
    context = {
        "config_path": config_path,
        "run_date": datetime.now().strftime("%Y-%m-%d %H:%M"),
        "summary_stats": summary_stats,
        "plots": plots,
        # "version": __version__,
    }

    # Render the template
    template = jinja2.Template(template_str)
    report_md = template.render(**context)

    # Save the report
    Path(output_dir).mkdir(parents=True, exist_ok=True)
    report_path = Path(output_dir) / f"summary_{datetime.now().strftime('%Y%m%d_%H%M')}.md"
    with open(report_path, "w", encoding="utf-8") as f:
        f.write(report_md)

    return str(report_path)
