# config.toml

# This is a comprehensive configuration file for the FIRE Monte Carlo simulation.
# It is designed to exercise all features and validation rules of the configuration
# parser.

# ==============================================================================
# 1. SIMULATION PARAMETERS
# ==============================================================================
[simulation_parameters]
# Number of Monte Carlo simulation runs to perform.
num_simulations = 10_000
# random_seed = 42         # Seed for random number generation, can be any integer

# ==============================================================================
# 2. PATHS
# ==============================================================================
[paths]
# Directory where all output (reports, plots, etc.) will be saved.
# Relative to the working directory.
output_root = "output/"

# ==============================================================================
# 3. DETERMINISTIC INPUTS
# ==============================================================================
# The years are counted from zero, so, if we are in 2025:
# 0 2025
# 1 2026
# 2 2027
# 3
#
# Imagine you are 30 and you want to retire at 50, ambitious!
# Suppose the pension (if you will have one) kicks in at 67 so at year 37 of the simulation.
# The simulation runs for 70 years to verify you can survive until 100.
[deterministic_inputs]
# Initial cash/bank account balance.
initial_bank_balance = 8000.0

# Bank balance thresholds for automatic investment/divestment.
bank_lower_bound = 5000.0
bank_upper_bound = 10000.0
investment_lot_size = 5000.0

# Total duration of the simulation.
years_to_simulate = 70

# --- Income Streams ---
# In a step, the `monthly_amount` is expressed in today's money and paid from
# `year` onward until the next step.
# In between steps the amount is not adjusted for inflation.
# From the beginning of the last defined step, income grows with inflation
# scaled by `income_inflation_factor`.
# Income is set to zero before the first step and after `income_end_year`.
# If this list is omitted or empty, no income is paid at any time.
monthly_income_steps = [
  { year = 0, monthly_amount = 4000.0 },
  { year = 5, monthly_amount = 5000.0 },
  { year = 10, monthly_amount = 7000.0 },
  { year = 15, monthly_amount = 10000.0 },
]
# Income inflation factor is used to adjust the income after the last step.
# 1.0 means grows exactly with inflation, > 1.0 means grows faster than inflation,
# < 1.0 grows slower than inflation, 0.0 means no infllation adjustment.
income_inflation_factor = 0.6
income_end_year = 20          # Slary stops, you are 50, you retire.

# Monthly pension.
# The pension starts at the nominal value `monthly_pension` the year `pension_start_year`.
# After that this value is adjusted with inflation scaled by `pension_inflation_factor`.
# Pay attention on how your pension fund estimate your pension at the year of retirement
# and if and how the value is inflation adjusted after retirement.
monthly_pension = 4000.0
pension_inflation_factor = 0.75 # Pension grows 75% of inflation.
pension_start_year = 37         # Pension starts at 67, you are 37 years into the simulation.

# Contributions
# One-time contributions (fixed nominal amounts, not inflation-adjusted).
# The contribution at year 0 sets the initial investment, 0 otherwise.
planned_contributions = [
  # { year = 0, amount = 100_000 },
  # { year = 5, amount = 20_000 },
  # { year = 10, amount = 20_000 },
  # { year = 15, amount = 10_000 },
]
# Expenses.
monthly_expenses_steps = [
  { year = 0, monthly_amount = 3500.0 },
  { year = 20, monthly_amount = 3000.0 },
  { year = 37, monthly_amount = 2500.0 },
  { year = 50, monthly_amount = 1500.0 },
]

# One-time extra expenses (in today's money, will be inflation-adjusted).
planned_extra_expenses = [
  { amount = 30_000.0, year = 20, description = "Buy a car" },
]
# Annual fee on all liquid investments (e.g., 0.0015 for 0.15%).
annual_fund_fee = 0.0015

# Transactions fee
transactions_fee = { min = 2.95, rate = 0.0019, max = 19 }

# ==============================================================================
# 4. ASSET DEFINITIONS
# ==============================================================================
# Defines all financial assets available in the simulation using a table for each asset.
# The key of the table (e.g., "stocks") is the unique identifier for the asset.
# - `mu`: Annual sample mean of return rates.
# - `sigma`: Annual sample standard deviation of return rates.
# - `is_liquid`: Boolean indicating if the asset is part of the liquid portfolio.
#    liquid portfolio can be rebalanced and sold to cover expenses.
#    Illiquid assets are only tracked.
# - `withdrawal_priority`: (For liquid assets only) Order in which assets are
#    sold to cover cash shortfalls (lower number = sold first).
#
# Stock parameters based on MSCI World (EUR) from 2016-2025.
# mu = 0.1017
# sigma = 0.1478
#
# The 2016-2025 period was exceptionally strong for global equities.
# For a long-term simulation (30+ years), it's advisable to temper expectations
# based on very long-term historical averages and current market valuations.
[assets.stocks]
mu = 0.07
sigma = 0.15
withdrawal_priority = 2

# European Bond parameters based on Bloomberg Euro Aggregate Bond Index (EUR) 2004-2023.
# mu = 0.0193
# sigma = 0.0535
#
# The 2004-2023 period includes many years of historically very low and even
# negative interest rates in Europe. The environment has shifted, and current
# yields are significantly higher.
[assets.bonds]
mu = 0.03
sigma = 0.055
withdrawal_priority = 1

# Statistical parameters for Euro Short-Term Rate (STR), derived from
# historical EONIA (1999-Sep 2019) and ESTR (Oct 2019-May 2025).
[assets.str]
mu = 0.0152
sigma = 0.0181
withdrawal_priority = 0

# Ethereum: from 2016 to 2025
# mu = 2.3755
# sigma = 1.3320

# Ethereum: Conservative values
[assets.eth]
mu = 0.25
sigma = 0.90
withdrawal_priority = 3

# Silver: from 2016 to 2025
# mu = 0.1120
# sigma = 0.2794

# Silver: Conservative values
[assets.ag]
mu = 0.07
sigma = 0.32
withdrawal_priority = 4

# Inflation although not an assate is mandatory to keep trak of the real values.
# Inflation parameters based on Eurozone HICP annual inflation rates from 2004-2023.
# mu = 0.0220
# sigma = 0.0229
#
# More relistic for the future
[assets.inflation]
mu = 0.025
sigma = 0.025


# ==============================================================================
# 5. CORRELATION MATRIX 
# ============================================================================== 
# Correlation matrix for asset returns and inflation.
# The `assets` list must match keys from the [assets] tables, plus "inflation".
# The `matrix` must be square and correspond to the `assets` list order.
[correlation_matrix]
assets_order = ["stocks", "bonds", "str", "eth", "ag", "inflation"]

# Matrix provided by Google Gemini 2.5 pro, reliable? Ahahah
# matrix = [
#   # stk,  bnd,  str,  eth,  ag,     pi
#   [1.00, -0.05, 0.02, 0.15, 0.29, 0.02],  # Stocks
#   [-0.05, 1.00, 0.50, 0.03, -0.10, 0.31], # Bonds
#   [0.02, 0.50, 1.00, 0.02, 0.03, 0.38],   # STR
#   [0.15, 0.03, 0.02, 1.00, 0.09, 0.04],   # Eth
#   [0.29, -0.10, 0.03, 0.09, 1.00, -0.02], # Ag
#   [0.02, 0.31, 0.38, 0.04, -0.02, 1.00],  # Inflation
# ]

# Identity matrix. Indipendent variables, no correlation.
matrix = [
  #stk, bnd, str, eth, ag,  pi
  [1.0, 0.0, 0.0, 0.0, 0.0, 0.0], # Stocks
  [0.0, 1.0, 0.0, 0.0, 0.0, 0.0], # Bonds
  [0.0, 0.0, 1.0, 0.0, 0.0, 0.0], # STR
  [0.0, 0.0, 0.0, 1.0, 0.0, 0.0], # Eth
  [0.0, 0.0, 0.0, 0.0, 1.0, 0.0], # Ag
  [0.0, 0.0, 0.0, 0.0, 0.0, 1.0], # Inflation
]
# ==============================================================================
# 6. SHOCKS
# ==============================================================================
# Defines specific, one-off market events that override stochastic returns for a
# given year.
# `asset` must match a key from the [assets] table.
#
# Black Friday Crash (October 1929 equivalent) 
# [[shocks]]
# year = 10
# description = "October 1929"
# impact = { stocks = -0.35, bonds = 0.02, inflation = -0.023 }


# ==============================================================================
# 7. PORTFOLIO REBALANCES
# ==============================================================================
# Defines the target asset allocation for the liquid portfolio at different stages.
# A rebalance must be defined for year 0 to set the initial allocation.
# Weights must sum to 1.0 and only include keys for assets where `is_liquid = true`.
[[portfolio_rebalances]]
year = 0
period = 3
weights = { stocks = 0.80, bonds = 0.15, eth = 0.025, ag = 0.025 }
description = "start allocation"

[[portfolio_rebalances]]
year = 20
description = "De-risking for retirement"
weights = { stocks = 0.60, bonds = 0.40 }
