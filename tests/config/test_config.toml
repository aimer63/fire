# This is a comprehensive test configuration file for the FIRE Monte Carlo simulation.
# It is designed to exercise all features and validation rules of the configuration parser.
# This file reflects the NEW dynamic asset configuration schema.

# ==============================================================================
# 1. SIMULATION PARAMETERS
# ==============================================================================
[simulation_parameters]
# Number of Monte Carlo simulation runs to perform.
num_simulations = 10_000
# random_seed = 42        # Seed for random number generation, can be any integer

# ==============================================================================
# 2. PATHS
# ==============================================================================
[paths]
# Directory where all output (reports, plots, etc.) will be saved.
# Relative to the project root.
output_root = "output/test_run"

# ==============================================================================
# 3. DETERMINISTIC INPUTS
# ==============================================================================
# The years are counted from zero, so, if we are in 2025:
# 0 2025
# 1 2026
# 2 2027
# 3 2028
# 4 2029
# 5 2030
# 6
#
# Initial values for each asset, mapping asset keys from the [assets] tables to amounts.
[deterministic_inputs]
initial_portfolio = { stocks = 59384.0, bonds = 92319.0, str = 156568.0, fun = 16164.0, real_estate = 0.0 }

# Initial cash/bank account balance.
initial_bank_balance = 19912.0

# Bank balance thresholds for automatic investment/divestment.
bank_lower_bound = 5000.0
bank_upper_bound = 10000.0

# Total duration of the simulation.
years_to_simulate = 38

# --- Income Streams ---
# Real (inflation-adjusted) monthly salary.
monthly_salary = 0.0
salary_inflation_factor = 1.01 # Salary grows 1% faster than inflation.
salary_start_year = 0
salary_end_year = 0            # Salary stops at the beginning of year 25.

# Real (inflation-adjusted) monthly pension.
monthly_pension = 4225.0
pension_inflation_factor = 0.6 # Pension grows exactly with inflation.
pension_start_year = 5

# --- Contributions & Expenses ---
# One-time contributions (fixed nominal amounts, not inflation-adjusted).
planned_contributions = [
  { amount = 74_553, year = 2 },
  { amount = 70_863, year = 3 },
  { amount = 60_633, year = 4 },
]

# Annual fee on all liquid investments (e.g., 0.0015 for 0.15%).
annual_fund_fee = 0.0015

# Fixed monthly living expenses (in today's money, will be inflation-adjusted).
monthly_expenses = 3300.0

# One-time extra expenses (in today's money, will be inflation-adjusted).
planned_extra_expenses = [
  { amount = 100_000.0, year = 1, description = "Son house help" },
]

# --- Major Life Events ---
# Real cost of a house purchase.
planned_house_purchase_cost = 0.0
house_purchase_year = 0

# ==============================================================================
# 4. ASSET DEFINITIONS
# ==============================================================================
# Defines all financial assets available in the simulation using a table for each asset.
# The key of the table (e.g., "stocks") is the unique identifier for the asset.
# - `mu`: Expected annual sample mean return.
# - `sigma`: Expected annual sample standard deviation of returns.
# - `is_liquid`: Boolean indicating if the asset is part of the liquid portfolio
#                that can be rebalanced and sold to cover expenses.
# - `withdrawal_priority`: (For liquid assets only) Order in which assets are
#                          sold to cover cash shortfalls (lower number = sold first).
#
# Stock parameters based on MSCI World (EUR) annual total returns from 2016-2025.
# MU: Arithmetic Mean
# SIGMA: Arithmetic Standard Deviation
# stock_mu = 0.1017
# stock_sigma = 0.1478
#
# The 2016-2025 period was exceptionally strong for global equities.
# For a long-term simulation (30+ years), it's advisable to temper expectations
# based on very long-term historical averages and current market valuations.
[assets.stocks]
mu = 0.07
sigma = 0.15
is_liquid = true
withdrawal_priority = 2

# European Bond parameters based on Bloomberg Euro Aggregate Bond Index (EUR)
# annual total returns from 2004-2023.
# MU: Arithmetic Mean
# SIGMA: Arithmetic Standard Deviation
# bond_mu = 0.0193
# bond_sigma = 0.0535

# The 2004-2023 period includes many years of historically very low and even
# negative interest rates in Europe. The environment has shifted, and current
# yields are significantly higher.
[assets.bonds]
mu = 0.03
sigma = 0.055
is_liquid = true
withdrawal_priority = 1

# Statistical parameters for Euro Short-Term Rate (STR), derived from
# historical EONIA (1999-Sep 2019) and ESTR (Oct 2019-May 2025) annual average rates.
# These are annual arithmetic mean and standard deviation.
[assets.str]
mu = 0.0152
sigma = 0.0181
is_liquid = true
withdrawal_priority = 0

# Ethereum: from 2016 to 2025
# fun_mu = 2.3755
# fun_sigma = 1.3320

# Ethereum: Conservative values
# fun_mu = 0.25
# fun_sigma = 0.90

# Silver: from 2016 to 2025
# fun_mu = 0.1120
# fun_sigma = 0.2794

# Silver: Conservative values
# fun_mu = 0.07
# fun_sigma = 0.32
#
# "Fun Money" (50% Ethereum, 50% Silver) Parameters based on annual returns from 2016-2023.
# MU: Arithmetic Mean
# SIGMA: Arithmetic Standard Deviation
# fun_mu = 1.2438
# fun_sigma = 0.6805

# "Fun Money" (50% Ethereum, 50% Silver): Based on the conservative values below
# MU: Arithmetic Mean
# SIGMA: Arithmetic Standard Deviation
[assets.fun]
mu = 0.16
sigma = 0.45
is_liquid = true
withdrawal_priority = 3

# Illiquid assets are handled separately and not part of portfolio rebalancing.
# They do not require a withdrawal_priority.
#
# Real Estate (Italy) parameters based on annual capital gains from 2004-2023, net of 1.5% annual maintenance.
# Note: Excludes rental income. Maintenance cost is an assumed average.
# MU: Arithmetic Mean
# SIGMA: Arithmetic Standard Deviation
[assets.real_estate]
mu = -0.0054
sigma = 0.0416
is_liquid = false

# Inflation parameters based on Eurozone HICP annual inflation rates from 2004-2023.
# MU_PI: Arithmetic Mean of inflation
# SIGMA_PI: Arithmetic Standard Deviation of inflation
# mu_pi = 0.0220
# sigma_pi = 0.0229
#
# More relistics for the future
[assets.inflation]
mu = 0.025
sigma = 0.025
is_liquid = false


# ==============================================================================
# 5. CORRELATION MATRIX 
# ============================================================================== 
# Correlation matrix for asset returns and inflation.
# The `assets` list must match keys from the [assets] tables, plus "inflation".
# The `matrix` must be square and correspond to the `assets` list order.
[correlation_matrix]
assets_order = ["stocks", "bonds", "str", "fun", "real_estate", "inflation"]

# Matrix provided by Google Gemini 2.5 pro, reliable? Ahahah
# matrix = [
#   # Stk,   Bnd,   STR,   Fun,   R.Est, Infl
#   [1.00, -0.30, 0.00, 0.45, 0.15, -0.20], # Stocks
#   [-0.30, 1.00, 0.40, -0.10, 0.05, 0.10], # Bonds
#   [0.00, 0.40, 1.00, -0.05, 0.00, 0.60],  # STR
#   [0.45, -0.10, -0.05, 1.00, 0.25, 0.15], # Fun
#   [0.15, 0.05, 0.00, 0.25, 1.00, 0.05],   # Real Estate
#   [-0.20, 0.10, 0.60, 0.15, 0.05, 1.00],  # Inflation
# ]

# Identity matrix. Indipendent variables, no correlation.
matrix = [
  #stk, bnd, str, fun, re,  pi
  [1.0, 0.0, 0.0, 0.0, 0.0, 0.0], # Stocks
  [0.0, 1.0, 0.0, 0.0, 0.0, 0.0], # Bonds
  [0.0, 0.0, 1.0, 0.0, 0.0, 0.0], # STR
  [0.0, 0.0, 0.0, 1.0, 0.0, 0.0], # Fun
  [0.0, 0.0, 0.0, 0.0, 1.0, 0.0], # Real Estate
  [0.0, 0.0, 0.0, 0.0, 0.0, 1.0], # Inflation
]
# ==============================================================================
# 6. SHOCKS
# ==============================================================================
# Defines specific, one-off market events that override stochastic returns for a
# given year.
# `asset` must match a key from the [assets] table.
#
# Black Friday Crash (October 1929 equivalent) 
[[shocks]]
year = 10
description = "October 1929 equivalent"
impact = { stocks = -0.35, bonds = 0.02, str = 0.0, fun = -0.15, inflation = -0.023 }


# ==============================================================================
# 7. PORTFOLIO REBALANCES
# ==============================================================================
# Defines the target asset allocation for the liquid portfolio at different stages.
# A rebalance must be defined for year 0 to set the initial allocation.
# Weights must sum to 1.0 and only include keys for assets where `is_liquid = true`.
[[portfolio_rebalances]]
year = 5
description = "De-risking for retirement"
weights = { stocks = 0.80, bonds = 0.15, fun = 0.05 }
