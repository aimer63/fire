# SPDX-FileCopyrightText: 2025 aimer63
#
# SPDX-License-Identifier: GPL-3.0-or-later

# flake8: noqa

import os
from firestarter.version import __version__
from datetime import datetime
from pathlib import Path

import jinja2
import json  # Use json instead of yaml


def generate_markdown_report(
    config_path: str,
    fire_stats: dict,
    output_dir: str,
    plots: dict[str, str] = None,
    parameters_summary: dict = None,
) -> str:
    """
    Generate a Markdown report summarizing the FIRE simulation results.

    - Includes summary statistics and final allocations for key scenarios.
    - Links to generated plots.
    - All allocations refer to liquid assets only; real estate is tracked separately.
    - Includes a summary of all loaded parameters.
    """
    if plots is None:
        plots = {}
    if parameters_summary is None:
        parameters_summary = {}

    # Pretty-print parameters_summary as JSON for Markdown code block
    parameters_json = json.dumps(parameters_summary, indent=2, ensure_ascii=False)

    template_str = """
# FIRE Simulation Report

**Config:** `{{ config_path }}`
**Run date:** {{ run_date }}

## FIRE Plan Simulation Summary

- **Success Rate:** {{ fire_stats.success_rate | round(2) }}%
- **Number of failed simulations:** {{ fire_stats.failed_simulations_count }}
- **Average months lasted in failed simulations:** {{ fire_stats.avg_months_failed | round(1) }}

{% if fire_stats.worst_successful %}
### Worst Successful Case
- Final Wealth (Nominal): {{ "{:,.2f} EUR".format(fire_stats.worst_successful.final_wealth_nominal) }}
- Final Wealth (Real): {{ "{:,.2f} EUR".format(fire_stats.worst_successful.final_wealth_real) }}
- Your life CAGR: {{ (fire_stats.worst_successful.cagr * 100) | round(2) }}%
- Final Allocations: {{ fire_stats.worst_successful.allocations }}
{% endif %}

{% if fire_stats.average_successful %}
### Average Successful Case
- Final Wealth (Nominal): {{
    "{:,.2f} EUR".format(fire_stats.average_successful.final_wealth_nominal)
}}
- Final Wealth (Real): {{ "{:,.2f} EUR".format(fire_stats.average_successful.final_wealth_real) }}
- Your life CAGR: {{ (fire_stats.average_successful.cagr * 100) | round(2) }}%
- Final Allocations: {{ fire_stats.average_successful.allocations }}
{% endif %}

{% if fire_stats.best_successful %}
### Best Successful Case
- Final Wealth (Nominal): {{ "{:,.2f} EUR".format(fire_stats.best_successful.final_wealth_nominal) }}
- Final Wealth (Real): {{ "{:,.2f} EUR".format(fire_stats.best_successful.final_wealth_real) }}
- Your life CAGR: {{ (fire_stats.best_successful.cagr * 100) | round(2) }}%
- Final Allocations: {{ fire_stats.best_successful.allocations }}
{% endif %}

## Plots

{% for plot_name, plot_path in plots.items() %}
- [{{ plot_name }}]({{ plot_path }})
{% endfor %}

## Loaded Parameters

```json
{{ parameters_json }}
```

---

*Generated by FIRE Simulator v{{ version }} on {{ run_date }}*
"""

    # Make plot paths relative to the report location
    rel_plots = {}
    report_dir = Path(output_dir)
    for name, plot_path in plots.items():
        rel_path = os.path.relpath(plot_path, start=report_dir)
        rel_plots[name] = rel_path

    context = {
        "config_path": config_path,
        "run_date": datetime.now().strftime("%Y-%m-%d %H:%M"),
        "fire_stats": fire_stats,
        "plots": rel_plots,
        "version": __version__,
        "parameters_json": parameters_json,
    }

    # Update template to use parameters_json
    template = jinja2.Template(template_str)
    report_md = template.render(**context)

    Path(output_dir).mkdir(parents=True, exist_ok=True)
    report_path = Path(output_dir) / f"summary_{datetime.now().strftime('%Y%m%d_%H%M')}.md"
    with open(report_path, "w", encoding="utf-8") as f:
        f.write(report_md)

    return str(report_path)
