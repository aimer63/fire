# config.toml

# The years are counted from zero, so, if we are 2025:
# 0 2025
# 1 2026
# 2 2027
# 3 2028
# 4 2029
# 5 2030
# 6
#

# --- A. Deterministic Inputs (Your Personal Financial Plan) ---
[deterministic_inputs]
i0 = 323_700 # Initial Investment Value (e.g., EUR)
b0 = 24_000  # Initial Bank Account Balance (e.g., EUR)

# Bank account lower and upper bound in real monaey
# if it goes below it will be topped, if it goes above it will be invested
# from the investment
real_bank_lower_bound = 10_000
real_bank_upper_bound = 20_000

# Number of years the simulation will run
t_ret_years = 38

# In flows

# To the bank:
s_real_monthly = 0                               # Initial real monthly salary (e.g., 2500 EUR in today's money)
salary_inflation_adjustment_factor = 1.0         # Factor by which salary adjusts to inflation (1.0 = same as inflation, 1.01 = 1% above inflation)
y_s_start_idx = 0                                # Year index when salary starts (e.g., 0 for immediate start)
y_s_end_idx = 0                                  # Year index when salary ends (e.g., 5 for 5 years of salary, exclusive of Year 5 itself)

# The pension
p_real_monthly = 4225
pension_inflation_adjustment_factor = 0.6
y_p_start_idx = 5

# To the investment:
# Fixed monthly contribution to the invested assets, like a pak in today money
c_real_monthly_initial = 0 # Example: 500€ per month in today's money

# Planned Contributions, real amount. [[contrib, year], ...]
c_planned = [
    # Equivalent to 60,000€ nominal in Year 2 (assuming 2% inflation)
    # 60000 / (1.02)^2 = 60000 / 1.0404 = 57669.93 plus 16088 naspi already
    # deflated
    [73_758, 2],
    # Equivalent to 60,000€ nominal in Year 3 (assuming 2% inflation)
    # 60000 / (1.02)^3 = 60000 / 1.061208 = 56538.96 plus 11382 naspi already
    # deflated
    [67_920, 3],
    # Equivalent to 60,000€ nominal in Year 4 (assuming 2% inflation)
    # 60000 / (1.02)^4 = 60000 / 1.08243216 = 55430.35
    [55_430, 4],
]

# Out flows
ter_annual_percentage = 0.002 # 2%
# Fixed monthly exepense for the life level you want to keep
x_real_monthly_initial = 3300

# Planned Extra Expenses real_amount. [[X, year], ...]
# 0 1,00    100.000,00
# 1 1,02    98.039,22
# 2 1,04    96.116,88
# 3 1,06    94.232,23
# 4 1,08    92.384,54
# 5 1,10    90.573,08

x_planned_extra = [
    [100_000, 1],
]

# Initial real cost of the house to be purchased at REBALANCING_YEAR_IDX
h0_real_cost = 150_000

# --- B. Economic Assumptions (Averages and Volatilities) ---
# Nominal values
[economic_assumptions]
# Stock parameters based on MSCI World (EUR) annual total returns from 2016-2025.
# MU: Arithmetic Mean
# SIGMA: Arithmetic Standard Deviation
# stock_mu = 0.1017
# stock_sigma = 0.1478

# The 2016-2025 period was exceptionally strong for global equities.
# For a long-term simulation (30+ years), it's advisable to temper expectations
# based on very long-term historical averages and current market valuations.
stock_mu = 0.07
stock_sigma = 0.15

# European Bond parameters based on Bloomberg Euro Aggregate Bond Index (EUR)
# annual total returns from 2004-2023.
# MU: Arithmetic Mean
# SIGMA: Arithmetic Standard Deviation
# bond_mu = 0.0193
# bond_sigma = 0.0535

# The 2004-2023 period includes many years of historically very low and even
# negative interest rates in Europe. The environment has shifted, and current
# yields are significantly higher.
bond_mu = 0.03
bond_sigma = 0.055


# Short-Term Reserves (STR) parameters based on historical Eurozone overnight rates (EONIA/€STR) from 2004-2023.
# MU: Arithmetic Mean
# SIGMA: Arithmetic Standard Deviation
str_mu = 0.0085
str_sigma = 0.0197

# "Fun Money" (50% Ethereum, 50% Silver) Parameters based on annual returns from 2016-2023.
# MU: Arithmetic Mean
# SIGMA: Arithmetic Standard Deviation
# fun_mu = 1.2438
# fun_sigma = 0.6805

# "Fun Money" (50% Ethereum, 50% Silver): Based on the conservative values below
# MU: Arithmetic Mean
# SIGMA: Arithmetic Standard Deviation
fun_mu = 0.16
fun_sigma = 0.45

# Ethereum: from 2016 to 2025
# fun_mu = 2.3755
# fun_sigma = 1.3320

# Ethereum: Conservative values remembering regression to the min
# fun_mu = 0.25
# fun_sigma = 0.90

# Silver: from 2016 to 2025
# fun_mu = 0.1120
# fun_sigma = 0.2794

# Silver: Conservative values remembering regression to the min
# fun_mu = 0.07
# fun_sigma = 0.32

# Real Estate (Italy) parameters based on annual capital gains from 2004-2023, net of 1.5% annual maintenance.
# Note: Excludes rental income. Maintenance cost is an assumed average.
# MU: Arithmetic Mean
# SIGMA: Arithmetic Standard Deviation
real_estate_mu = -0.0054
real_estate_sigma = 0.0416

# Inflation parameters based on Eurozone HICP annual inflation rates from 2004-2023.
# MU_PI: Arithmetic Mean of inflation
# SIGMA_PI: Arithmetic Standard Deviation of inflation
# mu_pi = 0.0220
# sigma_pi = 0.0229

# More relistics for the future
mu_pi = 0.025
sigma_pi = 0.025

[shocks]
events = []
# events = [
      # Black Friday Crash (October 1929 equivalent) - Now applied to Year 0.
      # Note: Without a 'month' field, this shock will be applied based on how your
      # simulation.py handles year-only shocks (e.g., at the start of Year 0).
      # The specific 'October' timing of Black Friday is not preserved here.
#     {year = 15, asset = "Stocks", magnitude = -0.35},        # Stock market was down significantly for 1929 (~30-40% from peak to year-end)
#     {year = 15, asset = "Bonds", magnitude = 0.02},          # Bonds could still show a small positive annual return (flight to safety)
#     {year = 15, asset = "STR", magnitude = 0.0},             # Short-Term Reserves / cash remain stable
#     {year = 15, asset = "Fun", magnitude = -0.15},           # Fun (50% Bitcoin, 50% Silver)
#     {year = 15, asset = "Real Estate", magnitude = -0.05},   # Real Estate declines began, though much slower and deeper over time.

    # Internet Bubble Burst (e.g., representing a year like 2000-2002)
#     {year = 10, asset = "Stocks", magnitude = -0.25},       # S&P 500 down ~20% in worst years, Nasdaq much more.
#     {year = 10, asset = "Bonds", magnitude = 0.10},         # Bonds saw strong gains as a safe haven.
#     {year = 10, asset = "STR", magnitude = 0.0},            # Short-Term Reserves / cash remain stable.
#     {year = 10, asset = "Fun", magnitude = -0.10},          # Fun (50% Bitcoin, 50% Silver)
#     {year = 10, asset = "Real Estate", magnitude = 0.05},   # Real Estate often performed well or was unaffected during this period.

#     # Great Recession (Worst year, e.g., 2008)
#     {year = 15, asset = "Stocks", magnitude = -0.37},       # S&P 500 down ~37% in 2008.
#     {year = 15, asset = "Bonds", magnitude = 0.05},         # Bonds saw positive returns as safe havens.
#     {year = 15, asset = "STR", magnitude = 0.0},            # Short-Term Reserves / cash remain stable.
#     {year = 15, asset = "Fun", magnitude = -0.30},          # Fun (50% Bitcoin, 50% Silver)
#     {year = 15, asset = "Real Estate", magnitude = -0.18},  # Significant residential real estate price declines.
# ]

# events = [
#     # Crypto shock
#     {year = 30, asset = "Stocks", magnitude = -0.1},
#     {year = 30, asset = "Bonds", magnitude = 0.02},
#     {year = 30, asset = "STR", magnitude = 0.0},
#     {year = 30, asset = "Fun", magnitude = -1.0},
#     {year = 30, asset = "Real Estate", magnitude = -0.05},
#     {year = 31, asset = "Stocks", magnitude = 0.05},
#     {year = 31, asset = "Bonds", magnitude = 0.02},
#     {year = 31, asset = "STR", magnitude = 0.0},
#     {year = 31, asset = "Fun", magnitude = -1.0},
#     {year = 31, asset = "Real Estate", magnitude = -0.05},
#     {year = 32, asset = "Stocks", magnitude = 0.095},
#     {year = 32, asset = "Bonds", magnitude = 0.019},
#     {year = 32, asset = "STR", magnitude = 0.0085},
#     {year = 32, asset = "Fun", magnitude = -1.0},
#     {year = 32, asset = "Real Estate", magnitude = -0.05},
# ]

# events = [
#     # Stagflation
#     {year = 10, asset = "Stocks", magnitude = -0.1},
#     {year = 10, asset = "Bonds", magnitude = 0.06},
#     {year = 10, asset = "STR", magnitude = 0.0},
#     {year = 10, asset = "Fun", magnitude = 0.0},
#     {year = 10, asset = "Real Estate", magnitude = -0.05},
#     {year = 10, asset = "Inflation", magnitude = 0.05},

#     {year = 11, asset = "Stocks", magnitude = 0.0002},
#     {year = 11, asset = "Bonds", magnitude = 0.012},
#     {year = 11, asset = "STR", magnitude = 0.0},
#     {year = 11, asset = "Fun", magnitude = 0.0},
#     {year = 11, asset = "Real Estate", magnitude = -0.05},
#     {year = 11, asset = "Inflation", magnitude = 0.15},

#     {year = 12, asset = "Stocks", magnitude = 0.003},
#     {year = 12, asset = "Bonds", magnitude = 0.019},
#     {year = 12, asset = "STR", magnitude = 0.0085},
#     {year = 12, asset = "Fun", magnitude = 0.0},
#     {year = 12, asset = "Real Estate", magnitude = -0.05},
#     {year = 12, asset = "Inflation", magnitude = 0.08},
# ]


# --- C. Portfolio Allocations (Weights) ---
[portfolio_allocations]
rebalancing_year_idx = 5
w_p1_stocks = 0.18
w_p1_bonds = 0.28
w_p1_str = 0.49
w_p1_fun = 0.05
w_p1_real_estate = 0.00

# w_p1_stocks = 0.20
# w_p1_bonds = 0.30
# w_p1_str = 0.50
# w_p1_fun = 0.0
# w_p1_real_estate = 0.00

w_p2_stocks = 0.80
w_p2_bonds = 0.15
w_p2_str = 0.00
w_p2_fun = 0.05
w_p2_real_estate = 0.00

# w_p2_stocks = 0.60
# w_p2_bonds = 0.40
# w_p2_str = 0.00
# w_p2_fun = 0.00
# w_p2_real_estate = 0.0

# w_p2_stocks = 0.03
# w_p2_bonds = 0.30
# w_p2_str = 0.00
# w_p2_fun = 0.00
# w_p2_real_estate = 0.67

# w_p2_stocks = 0.80
# w_p2_bonds = 0.10
# w_p2_str = 0.00
# w_p2_fun = 0.10
# w_p2_real_estate = 0.00

# --- D. Simulation Parameters ---
[simulation_parameters]
num_simulations = 10000