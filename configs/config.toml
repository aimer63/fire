# config.toml


# NOTE:
# The simulation assumes all assets, liabilities, incomes, expenses, and flows are denominated in a single currency.
# There is no currency conversion or multi-currency support; all values must be provided and interpreted in the same 
# currency throughout the simulation.

# --- Simulation Parameters ---
[simulation_parameters]
num_simulations = 10000

# --- Outputs ---
[paths]
output_root = "output"

# The years are counted from zero, so, if we are 2025:
# 0 2025
# 1 2026
# 2 2027
# 3 2028
# 4 2029
# 5 2030
# 6
# --- Deterministic Inputs (Your Personal Financial Plan) ---
[deterministic_inputs]
initial_investment = 100_000 # Initial Investment Value (e.g., EUR)
initial_bank_balance = 5000  # Initial Bank Account Balance (e.g., EUR)

# Bank account lower and upper bound in real money
# if it goes below it will be topped, if it goes above it will be invested
# from the investment
bank_lower_bound = 5000
bank_upper_bound = 10_000

# Number of years the simulation will run
years_to_simulate = 40

# In flows

# To the bank:
monthly_salary = 0                                  # Initial real monthly salary (e.g., 2500 EUR in today's money)
salary_inflation_factor = 1.0                       # Factor by which salary adjusts to inflation (1.0 = same as inflation, 1.01 = 1% above inflation)
salary_start_year = 0                               # Year index when salary starts (e.g., 0 for immediate start)
salary_end_year = 0                                 # Year index when salary ends (e.g., 5 for 5 years of salary, exclusive of Year 5 itself)

# The pension when it will arrive... if
monthly_pension = 0
pension_inflation_factor = 0.6
pension_start_year = 0

# To the investment:
# Fixed monthly contribution to the invested assets, like a pak in today money.
# Models something something is coming from outside
monthly_investment_contribution = 0 # Example: 500€ per month in today's money

# Planned Contributions, real amount at the time of the contribution
# [[contrib, year], ...]
planned_contributions = []
# planned_contributions = [
#     [10_000, 2],
#     [25_000, 3],
#     [5430, 4],
# ]

# Out flows
annual_fund_fee = 0.002 # 2%
# Fixed monthly exepense for the life level you want to keep
monthly_expenses = 0

# Planned Extra Expenses real_amount at the time of the expense. [[X, year], ...]
planned_extra_expenses = [
    [0, 0],
]

# Initial real cost of the house to be purchased at rebalancing_year_idx
planned_house_purchase_cost = 0
house_purchase_year = 0

# --- Economic Assumptions (Averages and Volatilities) ---
[market_assumptions]
# Stock parameters based on MSCI World (EUR) annual total returns from 2016-2025.
# MU: Arithmetic Mean
# SIGMA: Arithmetic Standard Deviation
# stock_mu = 0.1017
# stock_sigma = 0.1478

# The 2016-2025 period was exceptionally strong for global equities.
# For a long-term simulation (30+ years), it's advisable to temper expectations
# based on very long-term historical averages and current market valuations.
stock_mu = 0.07
stock_sigma = 0.15

# European Bond parameters based on Bloomberg Euro Aggregate Bond Index (EUR)
# annual total returns from 2004-2023.
# MU: Arithmetic Mean
# SIGMA: Arithmetic Standard Deviation
# bond_mu = 0.0193
# bond_sigma = 0.0535

# The 2004-2023 period includes many years of historically very low and even
# negative interest rates in Europe. The environment has shifted, and current
# yields are significantly higher.
bond_mu = 0.03
bond_sigma = 0.055


# Short-Term Reserves (STR) parameters based on historical Eurozone overnight rates (EONIA/€STR) from 2004-2023.
# MU: Arithmetic Mean
# SIGMA: Arithmetic Standard Deviation
str_mu = 0.0085
str_sigma = 0.0197

# "Fun Money" (50% Ethereum, 50% Silver) Parameters based on annual returns from 2016-2023.
# MU: Arithmetic Mean
# SIGMA: Arithmetic Standard Deviation
# fun_mu = 1.2438
# fun_sigma = 0.6805

# "Fun Money" (50% Ethereum, 50% Silver): Based on the conservative values below
# MU: Arithmetic Mean
# SIGMA: Arithmetic Standard Deviation
fun_mu = 0.16
fun_sigma = 0.45

# Ethereum: from 2016 to 2025
# fun_mu = 2.3755
# fun_sigma = 1.3320

# Ethereum: Conservative values
# fun_mu = 0.25
# fun_sigma = 0.90

# Silver: from 2016 to 2025
# fun_mu = 0.1120
# fun_sigma = 0.2794

# Silver: Conservative values
# fun_mu = 0.07
# fun_sigma = 0.32

# Real Estate (Italy) parameters based on annual capital gains from 2004-2023, net of 1.5% annual maintenance.
# Note: Excludes rental income. Maintenance cost is an assumed average.
# MU: Arithmetic Mean
# SIGMA: Arithmetic Standard Deviation
real_estate_mu = -0.0054
real_estate_sigma = 0.0416

# Inflation parameters based on Eurozone HICP annual inflation rates from 2004-2023.
# MU_PI: Arithmetic Mean of inflation
# SIGMA_PI: Arithmetic Standard Deviation of inflation
# mu_pi = 0.0220
# sigma_pi = 0.0229

# More relistics for the future
pi_mu = 0.025
pi_sigma = 0.025
# pi_sigma = 0.0

# Injects market shocks/crisis
[shocks]
# events = []
events = [
      # Black Friday Crash (October 1929 equivalent) - Now applied to Year 0.
      # Note: Without a 'month' field, this shock will be applied based on how your
      # simulation.py handles year-only shocks (e.g., at the start of Year 0).
      # The specific 'October' timing of Black Friday is not preserved here.
    # {year = 10, asset = "Stocks", magnitude = -0.35},        # Stock market was down significantly for 1929 (~30-40% from peak to year-end)
    # {year = 10, asset = "Bonds", magnitude = 0.02},          # Bonds could still show a small positive annual return (flight to safety)
    # {year = 10, asset = "STR", magnitude = 0.0},             # Short-Term Reserves / cash remain stable
    # {year = 10, asset = "Fun", magnitude = -0.15},           # Fun (50% Bitcoin, 50% Silver)
    # {year = 10, asset = "Real Estate", magnitude = -0.05},   # Real Estate declines began, though much slower and deeper over time.

    # # Internet Bubble Burst (e.g., representing a year like 2000-2002)
    # {year = 15, asset = "Stocks", magnitude = -0.25},       # S&P 500 down ~20% in worst years, Nasdaq much more.
    # {year = 15, asset = "Bonds", magnitude = 0.10},         # Bonds saw strong gains as a safe haven.
    # {year = 15, asset = "STR", magnitude = 0.0},            # Short-Term Reserves / cash remain stable.
    # {year = 15, asset = "Fun", magnitude = -0.10},          # Fun (50% Bitcoin, 50% Silver)
    # {year = 15, asset = "Real Estate", magnitude = 0.05},   # Real Estate often performed well or was unaffected during this period.

    # # Great Recession (Worst year, e.g., 2008)
    # {year = 20, asset = "Stocks", magnitude = -0.37},       # S&P 500 down ~37% in 2008.
    # {year = 20, asset = "Bonds", magnitude = 0.05},         # Bonds saw positive returns as safe havens.
    # {year = 20, asset = "STR", magnitude = 0.0},            # Short-Term Reserves / cash remain stable.
    # {year = 20, asset = "Fun", magnitude = -0.30},          # Fun (50% Bitcoin, 50% Silver)
    # {year = 20, asset = "Real Estate", magnitude = -0.18},  # Significant residential real estate price declines.
]

# events = [
#     # Crypto shock
#     {year = 30, asset = "Stocks", magnitude = -0.1},
#     {year = 30, asset = "Bonds", magnitude = 0.02},
#     {year = 30, asset = "STR", magnitude = 0.0},
#     {year = 30, asset = "Fun", magnitude = -1.0},
#     {year = 30, asset = "Real Estate", magnitude = -0.05},
#     {year = 31, asset = "Stocks", magnitude = 0.05},
#     {year = 31, asset = "Bonds", magnitude = 0.02},
#     {year = 31, asset = "STR", magnitude = 0.0},
#     {year = 31, asset = "Fun", magnitude = -1.0},
#     {year = 31, asset = "Real Estate", magnitude = -0.05},
#     {year = 32, asset = "Stocks", magnitude = 0.095},
#     {year = 32, asset = "Bonds", magnitude = 0.019},
#     {year = 32, asset = "STR", magnitude = 0.0085},
#     {year = 32, asset = "Fun", magnitude = -1.0},
#     {year = 32, asset = "Real Estate", magnitude = -0.05},
# ]

# events = [
#     # Stagflation
#     {year = 10, asset = "Stocks", magnitude = -0.1},
#     {year = 10, asset = "Bonds", magnitude = 0.06},
#     {year = 10, asset = "STR", magnitude = 0.0},
#     {year = 10, asset = "Fun", magnitude = 0.0},
#     {year = 10, asset = "Real Estate", magnitude = -0.05},
#     {year = 10, asset = "Inflation", magnitude = 0.05},

#     {year = 11, asset = "Stocks", magnitude = 0.0002},
#     {year = 11, asset = "Bonds", magnitude = 0.012},
#     {year = 11, asset = "STR", magnitude = 0.0},
#     {year = 11, asset = "Fun", magnitude = 0.0},
#     {year = 11, asset = "Real Estate", magnitude = -0.05},
#     {year = 11, asset = "Inflation", magnitude = 0.15},

#     {year = 12, asset = "Stocks", magnitude = 0.003},
#     {year = 12, asset = "Bonds", magnitude = 0.019},
#     {year = 12, asset = "STR", magnitude = 0.0085},
#     {year = 12, asset = "Fun", magnitude = 0.0},
#     {year = 12, asset = "Real Estate", magnitude = -0.05},
#     {year = 12, asset = "Inflation", magnitude = 0.08},
# ]

[portfolio_rebalances]
rebalances = [
  { year = 0,  stocks = 0.60, bonds = 0.35, str = 0.00, fun = 0.05 },
  { year = 20, stocks = 0.40, bonds = 0.60, str = 0.00, fun = 0.00 }
]
